{"Name":"MRoundedButton","Id":1253,"Alias":"mroundedbutton","Description":"MRoundedButton is a subclass of UIControl and the appearance is like the iOS 7 **Phone** app button or the button on the **Control Center** and also perform fade in/out animation for touch event.\n\nFour button styles are suplied:\n\n    RoundedButton.Default           //  central text\n    RoundedButton.Subtitle          //  text with subtitle \n    RoundedButton.CentralImage      //  central image\n    RoundedButton.ImageWithSubtitle //  image with subtitle\n\nTo set a transparent border:\n    \n    RoundedButton button = new RoundedButton (\u003cBUTTON_FRAME\u003e, \u003cBUTTON_STYLE\u003e);\n    button.BorderWidth = 2;\n    button.BorderColor = UIColor.Clear;\n\nThe value of `BorderWidth` and `CornerRadius` are limited to `Math.Min(\u003cBUTTON_WIDTH\u003e / 2, \u003cBUTTON_HEIGHT\u003e / 2)`. \nSetting the `CornerRadius` to `float.MaximumValue` or `RoundedButton.MaxValue` can easily make a round button.\n\n## RoundedButtonAppearanceManager\n\nRoundedButtonAppearanceManager is the appearance manager for RoundedButton, each appearance information can be stored in a [NSDictionary][1] object to make it reusable in the whole project:\n\n    NSDictionary appearanceProxy1 = NSDictionary.FromObjectsAndKeys (new object[] {\n        40,\n        2,\n        UIColor.Clear,\n        UIColor.Black,\n        UIColor.White,\n        UIColor.White,\n        UIColor.Clear \n    }, new string[] {\n        RoundedButtonAppearanceKeys.CornerRadius,\n        RoundedButtonAppearanceKeys.BorderWidth,\n        RoundedButtonAppearanceKeys.BorderColor,\n        RoundedButtonAppearanceKeys.ContentColor,\n        RoundedButtonAppearanceKeys.ContentAnimateToColor,\n        RoundedButtonAppearanceKeys.ForegroundColor,\n        RoundedButtonAppearanceKeys.ForegroundAnimateToColor\n    });\n    RoundedButtonAppearanceManager.RegisterAppearanceProxy(appearanceProxy1, #\u003cUNIQUE_IDENTIFIER\u003e);\n    \n## HollowBackgroundView\n\nHollowBackgroundView can be used to place the RoundedButton on an image view or any other view, and the superview will be displayed from the hollowed shapes.\n\n\n[1]:http://iosapi.xamarin.com/?link=T:Foundation.NSDictionary","Version":"1.1.2.0","Summary":"UIControl subclass like iOS 7 Phone app button.","QuickStart":"MRoundedButton is a subclass of UIControl and the appearance is like the iOS 7 **Phone** app button or the button on the **Control Center** and also perform fade in/out animation for touch event.\n\nFour button styles are suplied:\n\n    RoundedButton.Default           //  central text\n    RoundedButton.Subtitle          //  text with subtitle \n    RoundedButton.CentralImage      //  central image\n    RoundedButton.ImageWithSubtitle //  image with subtitle\n\nTo set a transparent border:\n    \n    RoundedButton button = new RoundedButton (\u003cBUTTON_FRAME\u003e, \u003cBUTTON_STYLE\u003e);\n    button.BorderWidth = 2;\n    button.BorderColor = UIColor.Clear;\n\nThe value of `BorderWidth` and `CornerRadius` are limited to `Math.Min(\u003cBUTTON_WIDTH\u003e / 2, \u003cBUTTON_HEIGHT\u003e / 2)`. \nSetting the `CornerRadius` to `float.MaximumValue` or `RoundedButton.MaxValue` can easily make a round button.\n\n## RoundedButtonAppearanceManager\n\nRoundedButtonAppearanceManager is the appearance manager for RoundedButton, each appearance information can be stored in a [NSDictionary][1] object to make it reusable in the whole project:\n\n    NSDictionary appearanceProxy1 = NSDictionary.FromObjectsAndKeys (new object[] {\n        40,\n        2,\n        UIColor.Clear,\n        UIColor.Black,\n        UIColor.White,\n        UIColor.White,\n        UIColor.Clear \n    }, new string[] {\n        RoundedButtonAppearanceKeys.CornerRadius,\n        RoundedButtonAppearanceKeys.BorderWidth,\n        RoundedButtonAppearanceKeys.BorderColor,\n        RoundedButtonAppearanceKeys.ContentColor,\n        RoundedButtonAppearanceKeys.ContentAnimateToColor,\n        RoundedButtonAppearanceKeys.ForegroundColor,\n        RoundedButtonAppearanceKeys.ForegroundAnimateToColor\n    });\n    RoundedButtonAppearanceManager.RegisterAppearanceProxy(appearanceProxy1, #\u003cUNIQUE_IDENTIFIER\u003e);\n    \n## HollowBackgroundView\n\nHollowBackgroundView can be used to place the RoundedButton on an image view or any other view, and the superview will be displayed from the hollowed shapes.\n\n\n[1]:http://iosapi.xamarin.com/?link=T:Foundation.NSDictionary","Hash":"2fa762ef43abc38f43e61db9dc2a7609","TargetPlatforms":["ios"],"TrialHash":null}